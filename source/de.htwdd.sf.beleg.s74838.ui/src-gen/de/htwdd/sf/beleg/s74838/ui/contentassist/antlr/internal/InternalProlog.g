/*
* generated by Xtext
*/
grammar InternalProlog;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.htwdd.sf.beleg.s74838.services.PrologGrammarAccess;

}

@parser::members {
 
 	private PrologGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PrologGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
(rule__Model__GreetingsAssignment)*
{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreeting
entryRuleGreeting 
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreetingAccess().getGroup()); }
(rule__Greeting__Group__0)
{ after(grammarAccess.getGreetingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFolge
entryRuleFolge 
:
{ before(grammarAccess.getFolgeRule()); }
	 ruleFolge
{ after(grammarAccess.getFolgeRule()); } 
	 EOF 
;

// Rule Folge
ruleFolge
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFolgeAccess().getGroup()); }
(rule__Folge__Group__0)
{ after(grammarAccess.getFolgeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotEmptyList
entryRuleNotEmptyList 
:
{ before(grammarAccess.getNotEmptyListRule()); }
	 ruleNotEmptyList
{ after(grammarAccess.getNotEmptyListRule()); } 
	 EOF 
;

// Rule NotEmptyList
ruleNotEmptyList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotEmptyListAccess().getGroup()); }
(rule__NotEmptyList__Group__0)
{ after(grammarAccess.getNotEmptyListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleList
entryRuleList 
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListAccess().getAlternatives()); }
(rule__List__Alternatives)
{ after(grammarAccess.getListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getIdentTerminalRuleCall_0()); }
	RULE_IDENT
{ after(grammarAccess.getAtomAccess().getIdentTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getVariableTerminalRuleCall_1()); }
	RULE_VARIABLE
{ after(grammarAccess.getAtomAccess().getVariableTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getNumberParserRuleCall_2()); }
	ruleNumber
{ after(grammarAccess.getAtomAccess().getNumberParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLeftSquareBracketRightSquareBracketKeyword_0()); }

	'[]' 

{ after(grammarAccess.getListAccess().getLeftSquareBracketRightSquareBracketKeyword_0()); }
)

    |(
{ before(grammarAccess.getListAccess().getNotEmptyListParserRuleCall_1()); }
	ruleNotEmptyList
{ after(grammarAccess.getListAccess().getNotEmptyListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Greeting__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }

	'Hello' 

{ after(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
(rule__Greeting__NameAssignment_1)
{ after(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }

	'!' 

{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Folge__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Folge__Group__0__Impl
	rule__Folge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFolgeAccess().getAtomParserRuleCall_0()); }
	ruleAtom
{ after(grammarAccess.getFolgeAccess().getAtomParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Folge__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Folge__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFolgeAccess().getGroup_1()); }
(rule__Folge__Group_1__0)*
{ after(grammarAccess.getFolgeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Folge__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Folge__Group_1__0__Impl
	rule__Folge__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFolgeAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getFolgeAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Folge__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Folge__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFolgeAccess().getAtomParserRuleCall_1_1()); }
	ruleAtom
{ after(grammarAccess.getFolgeAccess().getAtomParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotEmptyList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEmptyList__Group__0__Impl
	rule__NotEmptyList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEmptyList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEmptyListAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getNotEmptyListAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEmptyList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEmptyList__Group__1__Impl
	rule__NotEmptyList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEmptyList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEmptyListAccess().getFolgeParserRuleCall_1()); }
	ruleFolge
{ after(grammarAccess.getNotEmptyListAccess().getFolgeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotEmptyList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotEmptyList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEmptyList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotEmptyListAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getNotEmptyListAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__GreetingsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	ruleGreeting{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VARIABLE : 'A'..'Z';

RULE_IDENT : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


