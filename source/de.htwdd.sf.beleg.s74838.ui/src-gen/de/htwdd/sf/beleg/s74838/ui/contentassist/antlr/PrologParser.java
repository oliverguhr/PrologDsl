/*
* generated by Xtext
*/
package de.htwdd.sf.beleg.s74838.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.htwdd.sf.beleg.s74838.services.PrologGrammarAccess;

public class PrologParser extends AbstractContentAssistParser {
	
	@Inject
	private PrologGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal.InternalPrologParser createParser() {
		de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal.InternalPrologParser result = new de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal.InternalPrologParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getAtomAccess().getAtomAlternatives_0(), "rule__Atom__AtomAlternatives_0");
					put(grammarAccess.getListAccess().getAlternatives(), "rule__List__Alternatives");
					put(grammarAccess.getPrologDslAccess().getGroup(), "rule__PrologDsl__Group__0");
					put(grammarAccess.getExqueryAccess().getGroup(), "rule__Exquery__Group__0");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getQueryAccess().getGroup_1(), "rule__Query__Group_1__0");
					put(grammarAccess.getFactAccess().getGroup(), "rule__Fact__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup_3(), "rule__Predicate__Group_3__0");
					put(grammarAccess.getNotEmptyListAccess().getGroup(), "rule__NotEmptyList__Group__0");
					put(grammarAccess.getFolgeAccess().getGroup(), "rule__Folge__Group__0");
					put(grammarAccess.getFolgeAccess().getGroup_1(), "rule__Folge__Group_1__0");
					put(grammarAccess.getPrologDslAccess().getProgramAssignment_0(), "rule__PrologDsl__ProgramAssignment_0");
					put(grammarAccess.getPrologDslAccess().getExqueryAssignment_1(), "rule__PrologDsl__ExqueryAssignment_1");
					put(grammarAccess.getProgramAccess().getClauseAssignment(), "rule__Program__ClauseAssignment");
					put(grammarAccess.getExqueryAccess().getQueryAssignment_1(), "rule__Exquery__QueryAssignment_1");
					put(grammarAccess.getQueryAccess().getPredicateAssignment_0(), "rule__Query__PredicateAssignment_0");
					put(grammarAccess.getQueryAccess().getNthPredicateAssignment_1_1(), "rule__Query__NthPredicateAssignment_1_1");
					put(grammarAccess.getClauseAccess().getFactAssignment_0(), "rule__Clause__FactAssignment_0");
					put(grammarAccess.getClauseAccess().getRuleAssignment_1(), "rule__Clause__RuleAssignment_1");
					put(grammarAccess.getFactAccess().getPredicateAssignment_0(), "rule__Fact__PredicateAssignment_0");
					put(grammarAccess.getRuleAccess().getPredicateAssignment_0(), "rule__Rule__PredicateAssignment_0");
					put(grammarAccess.getRuleAccess().getQueryAssignment_2(), "rule__Rule__QueryAssignment_2");
					put(grammarAccess.getPredicateAccess().getFunctorAssignment_0(), "rule__Predicate__FunctorAssignment_0");
					put(grammarAccess.getPredicateAccess().getTermAssignment_2(), "rule__Predicate__TermAssignment_2");
					put(grammarAccess.getPredicateAccess().getNthTermAssignment_3_1(), "rule__Predicate__NthTermAssignment_3_1");
					put(grammarAccess.getTermAccess().getAtomAssignment_0(), "rule__Term__AtomAssignment_0");
					put(grammarAccess.getTermAccess().getListAssignment_1(), "rule__Term__ListAssignment_1");
					put(grammarAccess.getAtomAccess().getAtomAssignment(), "rule__Atom__AtomAssignment");
					put(grammarAccess.getListAccess().getEmptyListAssignment_0(), "rule__List__EmptyListAssignment_0");
					put(grammarAccess.getListAccess().getListAssignment_1(), "rule__List__ListAssignment_1");
					put(grammarAccess.getNotEmptyListAccess().getFolgeAssignment_1(), "rule__NotEmptyList__FolgeAssignment_1");
					put(grammarAccess.getFolgeAccess().getAtomAssignment_0(), "rule__Folge__AtomAssignment_0");
					put(grammarAccess.getFolgeAccess().getNthAtomAssignment_1_1(), "rule__Folge__NthAtomAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal.InternalPrologParser typedParser = (de.htwdd.sf.beleg.s74838.ui.contentassist.antlr.internal.InternalPrologParser) parser;
			typedParser.entryRulePrologDsl();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PrologGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PrologGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
