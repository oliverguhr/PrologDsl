/*
* generated by Xtext
*/
grammar InternalProlog;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.htwdd.sf.beleg.s74838.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.htwdd.sf.beleg.s74838.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.htwdd.sf.beleg.s74838.services.PrologGrammarAccess;

}

@parser::members {

 	private PrologGrammarAccess grammarAccess;
 	
    public InternalPrologParser(TokenStream input, PrologGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PrologGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Hello' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getHelloKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
    }
)
;









// Entry rule entryRuleAtom
entryRuleAtom returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); } 
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current.getText(); }  
	 EOF 
;

// Rule Atom
ruleAtom returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ident_0=RULE_IDENT    {
		$current.merge(this_ident_0);
    }

    { 
    newLeafNode(this_ident_0, grammarAccess.getAtomAccess().getIdentTerminalRuleCall_0()); 
    }

    |    this_variable_1=RULE_VARIABLE    {
		$current.merge(this_variable_1);
    }

    { 
    newLeafNode(this_variable_1, grammarAccess.getAtomAccess().getVariableTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getNumberParserRuleCall_2()); 
    }
    this_Number_2=ruleNumber    {
		$current.merge(this_Number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFolge
entryRuleFolge returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFolgeRule()); } 
	 iv_ruleFolge=ruleFolge 
	 { $current=$iv_ruleFolge.current.getText(); }  
	 EOF 
;

// Rule Folge
ruleFolge returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFolgeAccess().getAtomParserRuleCall_0()); 
    }
    this_Atom_0=ruleAtom    {
		$current.merge(this_Atom_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFolgeAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFolgeAccess().getAtomParserRuleCall_1_1()); 
    }
    this_Atom_2=ruleAtom    {
		$current.merge(this_Atom_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNotEmptyList
entryRuleNotEmptyList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEmptyListRule()); } 
	 iv_ruleNotEmptyList=ruleNotEmptyList 
	 { $current=$iv_ruleNotEmptyList.current.getText(); }  
	 EOF 
;

// Rule NotEmptyList
ruleNotEmptyList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNotEmptyListAccess().getLeftSquareBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNotEmptyListAccess().getFolgeParserRuleCall_1()); 
    }
    this_Folge_1=ruleFolge    {
		$current.merge(this_Folge_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNotEmptyListAccess().getRightSquareBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleList
entryRuleList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); } 
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current.getText(); }  
	 EOF 
;

// Rule List
ruleList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getListAccess().getLeftSquareBracketRightSquareBracketKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getListAccess().getNotEmptyListParserRuleCall_1()); 
    }
    this_NotEmptyList_1=ruleNotEmptyList    {
		$current.merge(this_NotEmptyList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





RULE_VARIABLE : 'A'..'Z';

RULE_IDENT : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


