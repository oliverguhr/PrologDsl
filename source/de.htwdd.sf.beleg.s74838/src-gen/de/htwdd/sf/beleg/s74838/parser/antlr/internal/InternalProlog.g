/*
* generated by Xtext
*/
grammar InternalProlog;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.htwdd.sf.beleg.s74838.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.htwdd.sf.beleg.s74838.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.htwdd.sf.beleg.s74838.services.PrologGrammarAccess;

}

@parser::members {

 	private PrologGrammarAccess grammarAccess;
 	
    public InternalPrologParser(TokenStream input, PrologGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PrologDsl";	
   	}
   	
   	@Override
   	protected PrologGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePrologDsl
entryRulePrologDsl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrologDslRule()); }
	 iv_rulePrologDsl=rulePrologDsl 
	 { $current=$iv_rulePrologDsl.current; } 
	 EOF 
;

// Rule PrologDsl
rulePrologDsl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrologDslAccess().getProgramProgramParserRuleCall_0_0()); 
	    }
		lv_program_0_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrologDslRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrologDslAccess().getExqueryExqueryParserRuleCall_1_0()); 
	    }
		lv_exquery_1_0=ruleExquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrologDslRule());
	        }
       		set(
       			$current, 
       			"exquery",
        		lv_exquery_1_0, 
        		"Exquery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getClauseClauseParserRuleCall_0()); 
	    }
		lv_clause_0_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_0_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleExquery
entryRuleExquery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExqueryRule()); }
	 iv_ruleExquery=ruleExquery 
	 { $current=$iv_ruleExquery.current; } 
	 EOF 
;

// Rule Exquery
ruleExquery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0()); 
	    }
		lv_query_1_0=ruleQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExqueryRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"Query");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExqueryAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0()); 
	    }
		lv_predicate_0_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_0_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getNthPredicatePredicateParserRuleCall_1_1_0()); 
	    }
		lv_nthPredicate_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"nthPredicate",
        		lv_nthPredicate_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	 iv_ruleClause=ruleClause 
	 { $current=$iv_ruleClause.current; } 
	 EOF 
;

// Rule Clause
ruleClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getFactFactParserRuleCall_0_0()); 
	    }
		lv_fact_0_0=ruleFact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"fact",
        		lv_fact_0_0, 
        		"Fact");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_0()); 
	    }
		lv_rule_1_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"rule",
        		lv_rule_1_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	 iv_ruleFact=ruleFact 
	 { $current=$iv_ruleFact.current; } 
	 EOF 
;

// Rule Fact
ruleFact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getPredicatePredicateParserRuleCall_0_0()); 
	    }
		lv_predicate_0_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_0_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFactAccess().getFullStopKeyword_1());
    }
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getPredicatePredicateParserRuleCall_0_0()); 
	    }
		lv_predicate_0_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_0_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_0()); 
	    }
		lv_query_2_0=ruleQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_2_0, 
        		"Query");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0()); 
	    }
		lv_functor_0_0=ruleFunctor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"functor",
        		lv_functor_0_0, 
        		"Functor");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0()); 
	    }
		lv_term_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getNthTermTermParserRuleCall_3_1_0()); 
	    }
		lv_nthTerm_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		add(
       			$current, 
       			"nthTerm",
        		lv_nthTerm_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleFunctor
entryRuleFunctor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctorRule()); } 
	 iv_ruleFunctor=ruleFunctor 
	 { $current=$iv_ruleFunctor.current.getText(); }  
	 EOF 
;

// Rule Functor
ruleFunctor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ident_0=RULE_IDENT    {
		$current.merge(this_ident_0);
    }

    { 
    newLeafNode(this_ident_0, grammarAccess.getFunctorAccess().getIdentTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getTermAtomParserRuleCall_0_0()); 
	    }
		lv_term_0_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_1, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getTermListParserRuleCall_0_1()); 
	    }
		lv_term_0_2=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_2, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_atom_0_1=RULE_IDENT
		{
			newLeafNode(lv_atom_0_1, grammarAccess.getAtomAccess().getAtomIdentTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"atom",
        		lv_atom_0_1, 
        		"ident");
	    }

    |		lv_atom_0_2=RULE_VARIABLE
		{
			newLeafNode(lv_atom_0_2, grammarAccess.getAtomAccess().getAtomVariableTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"atom",
        		lv_atom_0_2, 
        		"variable");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getAtomNumberParserRuleCall_0_2()); 
	    }
		lv_atom_0_3=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_0_3, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_list_0_0=	'[]' 
    {
        newLeafNode(lv_list_0_0, grammarAccess.getListAccess().getListLeftSquareBracketRightSquareBracketKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListRule());
	        }
       		setWithLastConsumed($current, "list", lv_list_0_0, "[]");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getListAccess().getNotEmptyListParserRuleCall_1()); 
    }
    this_NotEmptyList_1=ruleNotEmptyList
    { 
        $current = $this_NotEmptyList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotEmptyList
entryRuleNotEmptyList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEmptyListRule()); }
	 iv_ruleNotEmptyList=ruleNotEmptyList 
	 { $current=$iv_ruleNotEmptyList.current; } 
	 EOF 
;

// Rule NotEmptyList
ruleNotEmptyList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotEmptyListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotEmptyListAccess().getFolgeFolgeParserRuleCall_1_0()); 
	    }
		lv_folge_1_0=ruleFolge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotEmptyListRule());
	        }
       		set(
       			$current, 
       			"folge",
        		lv_folge_1_0, 
        		"Folge");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotEmptyListAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFolge
entryRuleFolge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFolgeRule()); }
	 iv_ruleFolge=ruleFolge 
	 { $current=$iv_ruleFolge.current; } 
	 EOF 
;

// Rule Folge
ruleFolge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0()); 
	    }
		lv_atom_0_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFolgeRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_0_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFolgeAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFolgeAccess().getNthAtomAtomParserRuleCall_1_1_0()); 
	    }
		lv_nthAtom_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFolgeRule());
	        }
       		add(
       			$current, 
       			"nthAtom",
        		lv_nthAtom_2_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall()); 
    }

    ;





RULE_VARIABLE : 'A'..'Z';

RULE_IDENT : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


